from aiogram import Router, types, F
from app.keyboards.courses import choose_course_keyboard
from app.database.database import Database
from aiogram.exceptions import TelegramBadRequest

router = Router()


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞")
async def select_course(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞".

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
    """
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=choose_course_keyboard())


@router.callback_query(F.data.startswith("course_"))
async def handle_course_choice(callback: types.CallbackQuery, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
        db (Database): –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    –î–µ–π—Å—Ç–≤–∏—è:
        - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏–∑ callback_data
        - –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î
        - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    course_number = int(callback.data.split("_")[1])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {course_number} –∫—É—Ä—Å–∞...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î
        schedule = await db.get_schedule_by_course(course_number)

        if not schedule:
            await callback.message.answer(f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {course_number} –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_text = format_schedule(schedule, course_number)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await callback.message.answer(schedule_text)

    except Exception as e:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")


def format_schedule(schedule: list, course: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        schedule: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ScheduleItem
        course: –ù–æ–º–µ—Ä –∫—É—Ä—Å–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    if not schedule:
        return f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {course} –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    result = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {course} –∫—É—Ä—Å–∞:\n\n"

    current_day = ""
    for item in schedule:
        if item.day_of_week != current_day:
            current_day = item.day_of_week
            result += f"\nüìÖ **{current_day.capitalize()}**:\n"

        time_str = f"{item.time_start.strftime('%H:%M')}-{item.time_end.strftime('%H:%M')}"
        classroom_str = f" (–∞—É–¥. {item.classroom})" if item.classroom else ""

        result += f"üïí {time_str} - {item.subject}\n"
        result += f"   üë®‚Äçüè´ {item.teacher}{classroom_str}\n"

    return result