"""
–†–µ–∞–ª–∏–∑—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (aiogram Router) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏.

1. –í—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
2. –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
3. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏ (—á—ë—Ç–Ω–∞—è, –Ω–µ—á—ë—Ç–Ω–∞—è, –ø–æ–ª–Ω–æ–µ)
4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

–û—à–∏–±–∫–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ logging.
"""

import logging
from collections import defaultdict

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.extracting_schedule.worker import get_schedule_for_group
from app.keyboards.faculty_kb import abbr_faculty
from app.keyboards.find_kb import faculty_keyboard_find, groups_keyboards_find
from app.keyboards.schedule_keyboards import choice_week_kb
from app.state.states import ShowSheduleStates

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("cancel_"), F.data.endswith("_find"))
async def cancel_find(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    - –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ.
    """

    await state.clear()
    await callback.message.edit_text(f"‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")

@router.message(F.text=="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def get_schedule_start(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ choice_faculty.
    """

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=faculty_keyboard_find)
    await state.set_state(ShowSheduleStates.choice_faculty)

@router.callback_query(StateFilter(ShowSheduleStates.choice_faculty), F.data.startswith("faculty:"))
async def get_schedule_faculty(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é.
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏.
    - –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """

    faculty_name = abbr_faculty[callback.data.split(":")[1]]
    groups_kb = groups_keyboards_find.get(faculty_name)
    if not groups_kb:
        await callback.message.edit_text("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
        return
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty_name}:", reply_markup=groups_kb)
    await state.set_state(ShowSheduleStates.choice_group)

@router.callback_query(StateFilter(ShowSheduleStates.choice_group), F.data.startswith("group:"))
async def choice_type_week(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    - –ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–Ω–µ–¥–µ–ª—è plus/minus/full).
    """

    group_name = callback.data.split(":")[1]
    await state.update_data(group_name=group_name)
    await state.set_state(ShowSheduleStates.choice_week)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=choice_week_kb())

# @router.callback_query(StateFilter(ShowSheduleStates.choice_week), F.data.startswith("week:"))
# async def show_schedule(callback: CallbackQuery, state: FSMContext):
#     """
#     –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
#
#     –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
#     callback : aiogram.types.CallbackQuery
#         –î–∞–Ω–Ω—ã–µ callback-–∫–Ω–æ–ø–∫–∏.
#     state : FSMContext
#         –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.
#
#     –õ–æ–≥–∏–∫–∞:
#     - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î.
#     - –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º.
#     - –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏.
#     - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç.
#     """
#
#     state_data = await state.get_data()
#     group_name = state_data.get("group_name")
#
#     # week: plus / minus / full
#     week = callback.data.split(":")[1]
#
#     try:
#         lessons = await get_schedule_for_group(group_name)
#         if not lessons:
#             await callback.message.edit_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ.")
#             return
#
#         lessons_by_day = defaultdict(list)
#         for l in lessons:
#             if l.weekday is not None:
#                 lessons_by_day[l.weekday].append(l)
#
#         week_order = sorted(lessons_by_day.keys())
#
#         weekday_names = {
#             1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
#             2: "–í—Ç–æ—Ä–Ω–∏–∫",
#             3: "–°—Ä–µ–¥–∞",
#             4: "–ß–µ—Ç–≤–µ—Ä–≥",
#             5: "–ü—è—Ç–Ω–∏—Ü–∞",
#             6: "–°—É–±–±–æ—Ç–∞",
#             7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
#         }
#
#         def format_lesson(l):
#             lesson_num_emoji = {
#                 1: "1Ô∏è‚É£",
#                 2: "2Ô∏è‚É£",
#                 3: "3Ô∏è‚É£",
#                 4: "4Ô∏è‚É£",
#                 5: "5Ô∏è‚É£",
#                 6: "6Ô∏è‚É£",
#                 7: "7Ô∏è‚É£"
#             }
#
#             start = l.start_time.strftime("%H:%M") if l.start_time else "??:??"
#             end = l.end_time.strftime("%H:%M") if l.end_time else "??:??"
#             time_str = f"‚è≥ {start} - {end}"
#
#             lesson_num = lesson_num_emoji.get(l.lesson_number + 1, "‚ùì") if l.lesson_number is not None else "‚ùì"
#             room = f"üìç{l.rooms}" if l.rooms else "üìç–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
#
#             professors = l.professors
#             if isinstance(professors, list):
#                 professors = ", ".join(professors)
#             elif not professors:
#                 professors = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
#
#             if l.week_mark == "plus":
#                 marker = "‚ûï"
#             elif l.week_mark == "minus":
#                 marker = "‚ûñ"
#             else:  # every
#                 marker = "‚ö™"
#
#             return f"  {marker} {lesson_num} {l.subject}\n  üë®‚Äçüè´ {professors}\n  {room}\n  {time_str}"
#
#         text = ""
#         for wd in week_order:
#             day_lessons = sorted(lessons_by_day[wd], key=lambda x: x.lesson_number or 0)
#
#             if week == "plus":
#                 filtered_lessons = [l for l in day_lessons if l.week_mark in ("every", "plus")]
#                 header = "üìÖ –ù–µ–¥–µ–ª—è ‚ûñ\n\n"
#             elif week == "minus":
#                 filtered_lessons = [l for l in day_lessons if l.week_mark in ("every", "minus")]
#                 header = "üìÖ –ù–µ–¥–µ–ª—è ‚ûï:\n\n"
#             else:  # full
#                 filtered_lessons = day_lessons
#                 header = "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
#
#             if filtered_lessons:
#                 if not text:
#                     text += header
#                 text += f"üóì {weekday_names[wd]}:\n"
#                 text += "\n\n".join(format_lesson(l) for l in filtered_lessons) + "\n\n\n"
#
#         if not text:
#             text = f"–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é ({week}) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ."
#
#         await callback.message.edit_text(text)
#
#     except Exception as e:
#         await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}")
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}: {e}")

@router.callback_query(StateFilter(ShowSheduleStates.choice_week), F.data.startswith("week:"))
async def show_schedule(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    callback : aiogram.types.CallbackQuery
        –î–∞–Ω–Ω—ã–µ callback-–∫–Ω–æ–ø–∫–∏.
    state : FSMContext
        –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –õ–æ–≥–∏–∫–∞:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î.
    - –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º.
    - –§–∏–ª—å—Ç—Ä—É–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏.
    - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç.
    - –î–µ–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ —á–µ–º MAX_MESSAGE_LENGTH
    """

    MAX_MESSAGE_LENGTH = 4000

    state_data = await state.get_data()
    group_name = state_data.get("group_name")
    week = callback.data.split(":")[1]

    try:
        lessons = await get_schedule_for_group(group_name)
        if not lessons:
            await callback.message.edit_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ.")
            return

        lessons_by_day = defaultdict(list)
        for l in lessons:
            if l.weekday is not None:
                lessons_by_day[l.weekday].append(l)

        week_order = sorted(lessons_by_day.keys())
        weekday_names = {
            1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            2: "–í—Ç–æ—Ä–Ω–∏–∫",
            3: "–°—Ä–µ–¥–∞",
            4: "–ß–µ—Ç–≤–µ—Ä–≥",
            5: "–ü—è—Ç–Ω–∏—Ü–∞",
            6: "–°—É–±–±–æ—Ç–∞",
            7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        lesson_num_emoji = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£"
        }

        def format_lesson(l):
            start = l.start_time.strftime("%H:%M") if l.start_time else "‚ùì‚ùì:‚ùì‚ùì"
            end = l.end_time.strftime("%H:%M") if l.end_time else "‚ùì‚ùì:‚ùì‚ùì"
            time_str = f"‚è≥ {start} - {end}"

            lesson_num = lesson_num_emoji.get(l.lesson_number + 1, "‚ùì") if l.lesson_number is not None else "‚ùì"
            room = f"üìç{l.rooms}" if l.rooms else "üìç–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            professors = ", ".join(l.professors) if isinstance(l.professors, list) else (l.professors or "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω")

            marker = "‚ö™"
            if l.week_mark == "plus":
                marker = "‚ûï"
            elif l.week_mark == "minus":
                marker = "‚ûñ"

            return f"  {marker} {lesson_num} {l.subject}\n  üë®‚Äçüè´ {professors}\n  {room}\n  {time_str}"

        day_texts = []
        header = {
            "plus": "üìÖ –ù–µ–¥–µ–ª—è ‚ûñ\n\n",
            "minus": "üìÖ –ù–µ–¥–µ–ª—è ‚ûï\n\n",
            "full": "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        }.get(week, "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n")

        for wd in week_order:
            day_lessons = sorted(lessons_by_day[wd], key=lambda x: x.lesson_number or 0)
            if week == "plus":
                filtered = [l for l in day_lessons if l.week_mark in ("every", "plus")]
            elif week == "minus":
                filtered = [l for l in day_lessons if l.week_mark in ("every", "minus")]
            else:
                filtered = day_lessons

            if filtered:
                day_block = f"üóì {weekday_names[wd]}:\n" + "\n\n".join(format_lesson(l) for l in filtered) + "\n\n"
                day_texts.append(day_block)

        if not day_texts:
            await callback.message.edit_text(f"–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é ({week}) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ.")
            return

        messages = []
        current_text = header
        for day_text in day_texts:
            if len(current_text) + len(day_text) > MAX_MESSAGE_LENGTH:
                messages.append(current_text)
                current_text = day_text
            else:
                current_text += day_text
        if current_text:
            messages.append(current_text)

        await callback.message.edit_text(messages[0])
        for msg in messages[1:]:
            await callback.message.answer(msg)

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}: {e}")
