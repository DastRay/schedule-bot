import logging
from collections import defaultdict

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.extracting_schedule.worker import get_schedule_for_group
from app.keyboards.faculty_kb import faculty_keyboard, faculty_keyboards, abbr_faculty
from app.keyboards.schedule_keyboards import choice_week_kb
from app.state.states import ShowSheduleStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text=="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def get_schedule_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=faculty_keyboard)
    await state.set_state(ShowSheduleStates.choice_faculty)

@router.callback_query(StateFilter(ShowSheduleStates.choice_faculty), F.data.startswith("faculty:"))
async def get_schedule_faculty(callback: CallbackQuery, state: FSMContext):
    faculty_name = abbr_faculty[callback.data.split(":")[1]]
    groups_kb = faculty_keyboards.get(faculty_name)
    if not groups_kb:
        await callback.message.edit_text("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
        return
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty_name}:", reply_markup=groups_kb)
    await state.set_state(ShowSheduleStates.choice_group)

@router.callback_query(StateFilter(ShowSheduleStates.choice_group), F.data.startswith("group:"))
async def choice_type_week(callback: CallbackQuery, state: FSMContext):
    group_name = callback.data.split(":")[1]
    await state.update_data(group_name=group_name)
    await state.set_state(ShowSheduleStates.choice_week)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=choice_week_kb())

@router.callback_query(StateFilter(ShowSheduleStates.choice_week), F.data.startswith("week:"))
async def show_schedule(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏.
    """
    state_data = await state.get_data()
    group_name = state_data.get("group_name")

    # week: plus / minus / full
    week = callback.data.split(":")[1]

    try:
        lessons = await get_schedule_for_group(group_name)
        if not lessons:
            await callback.message.edit_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ.")
            return

        lessons_by_day = defaultdict(list)
        for l in lessons:
            if l.weekday is not None:
                lessons_by_day[l.weekday].append(l)

        week_order = sorted(lessons_by_day.keys())

        weekday_names = {
            1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            2: "–í—Ç–æ—Ä–Ω–∏–∫",
            3: "–°—Ä–µ–¥–∞",
            4: "–ß–µ—Ç–≤–µ—Ä–≥",
            5: "–ü—è—Ç–Ω–∏—Ü–∞",
            6: "–°—É–±–±–æ—Ç–∞",
            7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        def format_lesson(l):
            lesson_num_emoji = {
                1: "1Ô∏è‚É£",
                2: "2Ô∏è‚É£",
                3: "3Ô∏è‚É£",
                4: "4Ô∏è‚É£",
                5: "5Ô∏è‚É£",
                6: "6Ô∏è‚É£",
                7: "7Ô∏è‚É£"
            }

            start = l.start_time.strftime("%H:%M") if l.start_time else "??:??"
            end = l.end_time.strftime("%H:%M") if l.end_time else "??:??"
            time_str = f"‚è≥ {start} - {end}"

            lesson_num = lesson_num_emoji.get(l.lesson_number + 1, "‚ùì") if l.lesson_number is not None else "‚ùì"
            room = f"üìç{l.rooms}" if l.rooms else "üìç–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            professors = l.professors
            if isinstance(professors, list):
                professors = ", ".join(professors)
            elif not professors:
                professors = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"

            if l.week_mark == "plus":
                marker = "‚ûï"
            elif l.week_mark == "minus":
                marker = "‚ûñ"
            else:  # every
                marker = "‚ö™"

            return f"  {marker} {lesson_num} {l.subject}\n  üë®‚Äçüè´ {professors}\n  {room}\n  {time_str}"

        text = ""
        for wd in week_order:
            day_lessons = sorted(lessons_by_day[wd], key=lambda x: x.lesson_number or 0)

            if week == "plus":
                filtered_lessons = [l for l in day_lessons if l.week_mark in ("every", "plus")]
                header = "üìÖ –ù–µ–¥–µ–ª—è ‚ûñ\n\n"
            elif week == "minus":
                filtered_lessons = [l for l in day_lessons if l.week_mark in ("every", "minus")]
                header = "üìÖ –ù–µ–¥–µ–ª—è ‚ûï:\n\n"
            else:  # full
                filtered_lessons = day_lessons
                header = "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"

            if filtered_lessons:
                if not text:
                    text += header
                text += f"üóì {weekday_names[wd]}:\n"
                text += "\n\n".join(format_lesson(l) for l in filtered_lessons) + "\n\n\n"

        if not text:
            text = f"–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é ({week}) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ."

        await callback.message.edit_text(text)

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}: {e}")