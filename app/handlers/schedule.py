"""
–†–µ–∞–ª–∏–∑—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏.

–û—à–∏–±–∫–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ logging.
"""

import logging
import datetime

from sqlalchemy import select
from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.utils import week_mark
from app.utils.schedule.worker import get_schedule_for_group
from app.keyboards.faculty_kb import abbr_faculty
from app.keyboards.find_kb import faculty_keyboard_find, groups_keyboards_find
from app.keyboards.schedule_kb import get_choice_week_kb
from app.state.states import ShowSheduleStates
from app.utils.schedule.schedule_formatter import escape_md_v2, format_schedule
from app.keyboards.schedule_kb import get_other_schedules_kb
from app.database.db import AsyncSessionLocal
from app.database.models import User, Lesson


router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("cancel_"), F.data.endswith("_find"))
async def cancel_find(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    - –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ.
    """

    await state.clear()
    await callback.message.edit_text(f"‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")

@router.callback_query(F.data=="exit_other_schedules")
async def exit_other_schedules(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ '–¥—Ä—É–≥–æ–≥–æ' —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.message.delete()


@router.message(F.text=="–î—Ä—É–≥–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
async def other_schedules(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä '–¥—Ä—É–≥–æ–≥–æ' —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=get_other_schedules_kb())

@router.callback_query(F.data=="other_schedule")
async def get_schedule_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ choice_faculty.
    """

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=faculty_keyboard_find)
    await state.set_state(ShowSheduleStates.choice_faculty)
    await callback.answer()


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def get_schedule_today(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏—Å—Ö–æ–¥—è –∏–∑ –µ–≥–æ faculty_id –∏ group_id –≤ —Ç–∞–±–ª–∏—Ü–µ user.
    """

    user_id = message.from_user.id
    today = datetime.date.today()
    weekday = today.isoweekday()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=1, ..., –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=7
    current_week_mark =  week_mark.WEEK_MARK_TXT

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                await message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            group = user.group
            if not group:
                await message.answer("‚ö†Ô∏è –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            result = await session.execute(
                select(Lesson)
                .where(Lesson.group_id == group.id)
                .where(Lesson.weekday == weekday)
            )
            lessons = result.scalars().all()

            lessons_today = [
                l for l in lessons
                if l.week_mark in ("every", current_week_mark)
            ]

            if not lessons_today:
                await message.answer("–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üéâ")
                return

            text_blocks = format_schedule(
                lessons=lessons_today,
                week=current_week_mark,
                header_prefix=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')})"
            )

            for text in text_blocks:
                await message.answer(text, parse_mode="MarkdownV2", disable_web_page_preview=True)


    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

@router.callback_query(F.data=="professor_schedule")
async def professor_schedule(callback: CallbackQuery):
    await callback.message.edit_text("–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω üò¢")
    await callback.answer()

@router.callback_query(F.data == "weekly_schedule")
async def weekly_schedule(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é".

    1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    2. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∞—Ä–∫–µ—Ä –Ω–µ–¥–µ–ª–∏ (plus / minus).
    3. –ü–æ–ª—É—á–∞–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Lesson –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã.
    4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.
    """
    user_id = callback.from_user.id
    try:
        async with AsyncSessionLocal() as session:

            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            if not user:
                await callback.message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            current_week = week_mark.WEEK_MARK_TXT
            lessons_query = await session.execute(
                select(Lesson)
                .where(Lesson.group_id == user.group_id)
                .order_by(Lesson.weekday, Lesson.lesson_number)
            )
            lessons = lessons_query.scalars().all()

            if not lessons:
                await callback.message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            messages = format_schedule(
                lessons,
                week=current_week,
                header_prefix=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {user.group.group_name} –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
            )

            await callback.message.edit_text(messages[0], parse_mode="MarkdownV2", disable_web_page_preview=True)
            for msg in messages[1:]:
                await callback.message.answer(msg, parse_mode="MarkdownV2", disable_web_page_preview=True)

            await callback.answer()

    except Exception as e:
        logger.exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ weekly_schedule: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")



@router.callback_query(StateFilter(ShowSheduleStates.choice_faculty), F.data.startswith("faculty:"))
async def get_schedule_faculty(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é.
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏.
    - –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """

    faculty_name = abbr_faculty[callback.data.split(":")[1]]
    groups_kb = groups_keyboards_find.get(faculty_name)
    if not groups_kb:
        await callback.message.edit_text("‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
        return
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty_name}:", reply_markup=groups_kb)
    await state.set_state(ShowSheduleStates.choice_group)

@router.callback_query(StateFilter(ShowSheduleStates.choice_group), F.data.startswith("group:"))
async def choice_type_week(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.

    –î–µ–π—Å—Ç–≤–∏—è:
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    - –ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–Ω–µ–¥–µ–ª—è plus/minus/full).
    """

    group_name = callback.data.split(":")[1]
    await state.update_data(group_name=group_name)
    await state.set_state(ShowSheduleStates.choice_week)

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"
                                     f"–°–µ–π—á–∞—Å –Ω–µ–¥–µ–ª—è {week_mark.WEEK_MARK_STICKER}", reply_markup=get_choice_week_kb())

@router.callback_query(StateFilter(ShowSheduleStates.choice_week), F.data.startswith("week:"))
async def show_schedule(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏
    (—á—ë—Ç–Ω–∞—è, –Ω–µ—á—ë—Ç–Ω–∞—è, –ø–æ–ª–Ω–æ–µ) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """

    state_data = await state.get_data()
    group_name = state_data.get("group_name")
    week = callback.data.split(":")[1]

    try:
        lessons = await get_schedule_for_group(group_name)
        if not lessons:
            await callback.message.edit_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ.")
            return

        messages = format_schedule(lessons=lessons, week=week, header_prefix=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name}")

        if not messages:
            await callback.message.edit_text(f"–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é ({week}) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} –ø—É—Å—Ç–æ–µ.")
            return

        await callback.message.edit_text(messages[0], parse_mode="MarkdownV2", disable_web_page_preview=True)
        for msg in messages[1:]:
            await callback.message.answer(msg.strip(), parse_mode="MarkdownV2", disable_web_page_preview=True)

    except Exception as e:
        logger.exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group_name}: {e}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è *{escape_md_v2(group_name)}*.",
            parse_mode="MarkdownV2"
        )