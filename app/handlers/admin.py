import asyncio
import logging
from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import update, select

from app.database.models import User
from app.filters.is_admin import IsAdminFilter
from app.keyboards.admin_kb import get_admin_kb
from app.state.states import AddAdminStates
from app.database.db import AsyncSessionLocal
from app.utils.admins.admin_list import add_admin_to_list, remove_admin_from_list, get_admin_username

router = Router()
logger = logging.getLogger(__name__)


def escape_md_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.
    """
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text


@router.callback_query(F.data=="exit_admin_panel", IsAdminFilter())
async def exit_admin_panel(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer()


@router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", IsAdminFilter())
async def admin_panel_message(message: Message, state: FSMContext):
    await message.answer(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_kb())
    await state.clear()


@router.callback_query(F.data=="admin_panel", IsAdminFilter())
async def admin_panel_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_kb())
    await callback.answer()
    await state.clear()


@router.callback_query(F.data == "add_admin", IsAdminFilter())
async def add_admin(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                                     "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å id –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è @username_to_id_bot",
                                     reply_markup=kb)
    await state.set_state(AddAdminStates.waiting_id)
    await callback.answer()
    await state.update_data(message_id=callback.message.message_id)


@router.message(StateFilter(AddAdminStates.waiting_id), IsAdminFilter())
async def reading_id(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        message_id_to_delete = data.get("message_id")
        if message_id_to_delete:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=message_id_to_delete)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ add_admin: {e}")

        user_id = int(message.text)

        if user_id == message.from_user.id:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            await state.clear()
            return

        async with AsyncSessionLocal() as session:
            user = await session.get(User, user_id)
            if not user:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                logger.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                await state.clear()
                return

            if user.role == 1:
                await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                logger.info(f"‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏–º —è–≤–ª—è–µ—Ç—Å—è.")
                await state.clear()
                return

            await session.execute(
                update(User)
                .where(User.id == user_id)
                .values(role=1)
            )
            await session.commit()

            success_message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            await message.answer(success_message)
            logger.info(success_message)

            await add_admin_to_list(user_id)

    except ValueError as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ID '{message.text}' –≤ handler reading_id: {e}")

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID.")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ reading_id –¥–ª—è —Ç–µ–∫—Å—Ç–∞ '{message.text}': {e}")

    finally:
        await state.clear()


@router.callback_query(F.data == "list_of_admins", IsAdminFilter())
async def list_admins(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        stmt = select(User).where(User.role == 1)
        result = await session.execute(stmt)
        admins = result.scalars().all()

        if not admins:
            await callback.message.edit_text(
                text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
                .as_markup()
            )
            await callback.answer()
            return

        admin_list = "üìã *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"

        for i, admin in enumerate(admins, 1):
            escaped_id = escape_md_v2(str(admin.id))

            username = get_admin_username(admin.id)
            username_text = f" ‚Äî {escape_md_v2(username)}" if username is not None else ""

            current_user_marker = " ‚≠ê –≠—Ç–æ –≤—ã" if admin.id == callback.from_user.id else ""

            admin_list += (f"{i}\\. ID `{escaped_id}`{username_text}"
                           f"\n     {current_user_marker}\n")

        admin_list += (
            "\n–ü—Ä–∏ –Ω–µ —Ä–∞–±–æ—á–µ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å:\n"
            "app\\: tg\\:\\/\\/user\\?id\\=ID\n"
            "web\\: https\\:\\/\\/web\\.telegram\\.org\\/k\\/\\#ID\n"
        )

        builder = InlineKeyboardBuilder()
        for admin in admins:
            if admin.id != callback.from_user.id:
                builder.button(
                    text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {admin.id}",
                    callback_data=f"remove_admin_{admin.id}"
                )

        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        builder.adjust(1)

        await callback.message.edit_text(
            admin_list,
            parse_mode="MarkdownV2",
            reply_markup=builder.as_markup(),
            disable_web_page_preview=True
        )
        await callback.answer()


@router.callback_query(F.data.startswith("remove_admin_"), IsAdminFilter())
async def remove_admin_handler(callback: CallbackQuery):
    try:
        admin_id = int(callback.data.split("_")[2])

        if admin_id == callback.from_user.id:
            await callback.answer(text="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è", show_alert=True)
            return

        async with AsyncSessionLocal() as session:
            user = await session.get(User, admin_id)
            if not user:
                await callback.answer(text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            await session.execute(
                update(User)
                .where(User.id == admin_id)
                .values(role=0)
            )
            await session.commit()

        txt = f"‚úÖ ID: {admin_id} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        logger.info(txt)
        await callback.message.edit_text(text=txt)
        await callback.answer()

        await remove_admin_from_list(admin_id)

        await asyncio.sleep(1)
        await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=get_admin_kb())

    except (ValueError, IndexError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")