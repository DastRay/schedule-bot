import logging
import datetime

from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select

from app.database.db import AsyncSessionLocal
from app.database.models import User, Lesson
import app.utils.week_mark as week_mark
from app.utils.schedule.schedule_formatter import format_schedule

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def get_schedule_today(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏—Å—Ö–æ–¥—è –∏–∑ –µ–≥–æ faculty_id –∏ group_id –≤ —Ç–∞–±–ª–∏—Ü–µ user.
    """

    user_id = message.from_user.id
    today = datetime.date.today()
    weekday = today.isoweekday()  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=1, ..., –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=7
    current_week_mark =  week_mark.WEEK_MARK_TXT
    print(f"current_week_mark = {current_week_mark}")

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            if not user:
                await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            group = user.group
            if not group:
                await message.answer("–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            result = await session.execute(
                select(Lesson)
                .where(Lesson.group_id == group.id)
                .where(Lesson.weekday == weekday)
            )
            lessons = result.scalars().all()

            lessons_today = [
                l for l in lessons
                if l.week_mark in ("every", current_week_mark)
            ]

            if not lessons_today:
                await message.answer("–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üéâ")
                return

            text_blocks = format_schedule(
                lessons=lessons_today,
                week=current_week_mark,
                header_prefix=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è \\({today.strftime('%d\\.%m\\.%Y')}\\)"
            )

            for text in text_blocks:
                await message.answer(text, parse_mode="MarkdownV2")


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")